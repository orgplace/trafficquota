// Code generated by go-enum
// DO NOT EDIT!

package config

import (
	"fmt"
)

const (
	// StrategyTimeSlice is a Strategy of type Time-Slice
	StrategyTimeSlice Strategy = iota
	// StrategyTimestamp is a Strategy of type Timestamp
	StrategyTimestamp
)

const _StrategyName = "time-slicetimestamp"

var _StrategyMap = map[Strategy]string{
	0: _StrategyName[0:10],
	1: _StrategyName[10:19],
}

// String implements the Stringer interface.
func (x Strategy) String() string {
	if str, ok := _StrategyMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Strategy(%d)", x)
}

var _StrategyValue = map[string]Strategy{
	_StrategyName[0:10]:  0,
	_StrategyName[10:19]: 1,
}

// ParseStrategy attempts to convert a string to a Strategy
func ParseStrategy(name string) (Strategy, error) {
	if x, ok := _StrategyValue[name]; ok {
		return x, nil
	}
	return Strategy(0), fmt.Errorf("%s is not a valid Strategy", name)
}

// MarshalText implements the text marshaller method
func (x *Strategy) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Strategy) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStrategy(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
